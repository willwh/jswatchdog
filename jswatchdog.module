<?php
/**
 * @file
 * Provides Drupal.watchdog() in Javascript to log errors to the database.
 */

/**
 * Implements hook_permission().
 */
function jswatchdog_permission() {
  return array(
    'log messages to watchdog via js' => array(
      'title' => t('jswatchdog'),
      'description' => t('Log messages to watchdog'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function jswatchdog_menu() {
  $items = array();

  $items['ajax/jswatchdog'] = array(
    'page callback' => 'jswatchdog_menu_callback',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('log messages to watchdog via js'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback.
 */
function jswatchdog_menu_callback() {
  // Prevent the database being flooded.
  flood_register_event('jswatchdog');
  if (flood_is_allowed('jswatchdog', variable_get('jswatchdog_server_limit', 30))) {
    // Sanatize the arguments.
    $params = array();
    $arguments = array(
      'type' => 'is_string',
      'message' => 'is_string',
      'variables' => 'is_array',
      'severity' => 'is_numeric',
      'link' => 'is_string',
    );
    foreach ($arguments as $key => $func) {
      $params[] = (!empty($_POST[$key]) && $func($_POST[$key])) ? $_POST[$key] : NULL;
    }
    call_user_func_array('watchdog', $params);
  }

  // Do not render any response, whether it got logged or not.
  return;
}

/**
 * Implements hook_page_alter().
 */

function jswatchdog_page_alter(&$page) {
  if (user_access('log messages to watchdog via js')) {
    // Only add JS if there is already some JS on this page.
    $js = drupal_add_js();
    if (!empty($js)) {
      drupal_add_js(drupal_get_path('module', 'jswatchdog') . '/jswatchdog.js');
      drupal_add_js(array('jswatchdogLimit' => variable_get('jswatchdog_client_limit', 3)), 'setting');
    }
  }
}
